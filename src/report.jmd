---
title : Pendulum Experiment
course: ARTSSCI 2D06
author : David Kanter Eivin
date: 8th April 2022
---
```julia, echo=false
using lab
using DataFrames
using Plots
using Statistics
```
# Introduction
Pendulums have for hundreds of years interested physics and industrialists alike.
Not only are pendulums mystical to observe, they are immensely useful for mechanical timekeeping.
From a physics standpoint, pendulums demonstrate the constant transformation between potential and kinetic energy,
and, in a vacuum (with frictionless a frictionless pivot),
can also demonstrate Newton's law of inertia by continuing to swing forever.

![Pendulum](pendulum.png)

Pendulums rely on the force of gravity pulling down on a massive bob,
counteracted by tensive forces on the massless string/rod.
The result is angular acceleration towards the point of maximum kinetic energy.
An oscillation period is the time it takes for the bob to move across the pendulum
(to the opposite point of maximum potential energy) and return to the highest point where it started.

This project simulates a pendulum and uses the results of the simulation to discuss the parameters determining
a pendulum's period. The nature of a simulation means that while results are very precise and reproducible,
their accuracy is largely dependent on previous observations:
in this case, the laws of angular motion and air resistance.
The code is included in this report is written in the simplest terms possible;
while a software background may be helpful,
a physics background should be sufficient to *understand* the report *and* the simulation's source code.

``\pagebreak``

# Purpose
Given the importance of the oscillation period,
this experiment examines the dependence of the period on the pendulum's
**maximum/starting amplitude** and **length**.
Additionally, the experiment aims to **precisely simulate pendulum movement**
with and without air resistance for reuse in other pendulum experiments.

# Method
## Software Simulation (Apparatus)
The [Julia Programming Language](https://julialang.org/) was selected for its
readable mathematical syntax for non-technical readers and excellent performance.
To avoid the tedious and unclear computation of kinetic vectors using ``x`` and ``y`` coordinates,
I used Lagrangian mechanics to work directly with angular quantities.
After deriving formulas for instantaneous angular acceleration (``\alpha``) and air resistance (shown below),
I used Euler's method to compute the next angular velocity (``\omega``) and position (``\theta``).
Essentially, angular acceleration is assumed to be constant for a small time interval ``\Delta t``
in order to compute ``\omega``.
This is assumed to be constant for the same time interval, thus allowing the computation of ``\theta``
at ``t + \Delta t``.
Time is then advanced by ``\Delta t`` and ``\theta`` is once again used to compute ``\alpha``.
**For all trials, ``\Delta t = `j Δt`\mathrm{s}``**.
Each step is recorded into a `DataFrame` to be available for analysis and animation.

### Lagrangian
The simulation formulas start from a general differential equation for motion.
$$
\frac{d}{dt} \frac{dL}{d\theta} = \frac{2L}{2\theta} - \frac{2D}{2\theta}
$$
where ``L`` is the Lagrangian and ``D`` is the dampening factor.
Then, where ``l`` represents the length of the rod:
$$
\begin{align*}
    L &= K - U \\
    K &= \text{Kinetic Energy} = \frac{1}{2} mv^2 \\
    &= \frac{1}{2} ml^2\theta^2 \\ \\
    U &= \text{Potential Energy} = mgh = mg(l - l \cdot \cos \theta
\end{align*}
$$

Together, this comprises the final Lagrangian:
$$
L = \frac{1}{2} ml^2\theta^2 - mg(l - l \cdot \cos \theta)
$$
which is differentiated with respect to ``\theta`` to achieve:
$$
\begin{align*}
    \frac{d}{dt}\left(ml^2\dot\theta\right) &= -L \sin\theta mg \\
    \implies \ddot\theta &= \alpha = -\frac{g\sin\theta}{l}
\end{align*}
$$
As code:
```julia, eval=false
ddθ(θ::Number) = -(sin(θ) * g) / radius
```

### Air Resistance (drag)
Using the above formula, this simulation will continue forever.
While this is useful for studying theory,
it will differ substantially from experimental results,
which are impacted substantially by air resistance.

To simulate air resistance,
first I determined whether the linear or quadratic formulas would be more appropriate.
$$
\begin{align*}
\Omega_{\mathrm{linear}} &= bv = βDv \\
\Omega_{\mathrm{quadratic}} &= cv^2 = \gamma D^2 v^2
\end{align*}
$$
where ``D`` is the diameter of the bob.
The bob is assumed to be a sphere with ``\gamma = `j const γ = .25; γ` ``.
I also chose to measure velocity from the point of maximum PE.
$$
\begin{align*}
mgh &= \frac{1}{2} mv^2 \\
\implies gl &= v^2 \\
\implies v &= \sqrt{gl}
\end{align*}
$$
Then:
$$
\frac{\Omega_{\mathrm{linear}}}{\Omega_{\mathrm{quadratic}}}
= \frac{\beta D \sqrt{gl}}{\gamma D^2 \sqrt{gl}^2}
= \frac{\beta}{\gamma D \sqrt{gl}}
$$
Using example values ``D = `j D = .1; D`\mathrm{m}`` and ``l = `j l = .1; l`\mathrm{m}``:
```julia
(1.6e-4) \ (γ * D * sqrt(g * l))
```
we have that the quadratic formula is substantially larger
(`\` is [inverse division](https://docs.julialang.org/en/v1/manual/mathematical-operations/#Arithmetic-Operators))
so **we will use the quadratic formula for air resistance**.

After differentiating and simplifying as we did previously,
the formula for α which accounts for drag is:
$$
\alpha = -\frac{g\sin\theta}{l} - \gamma D^2 l \omega^2
$$
Notably, this is *not* a vector but a magnitude,
and so direction must be adjusted to oppose ``\omega``.
```julia, eval=false
drag(ω::Number) = γ * (radius) * (diameter ^ 2) * (ω ^ 2) / mass
```

### Final Code:
Using the above formulas,
the iterative process for simulating data is summarized as follows (see Appendix A for full code).
```julia, eval=false
# Initial θ and ω are required.
# θ is provided as a parameter, ω is assumed to be 0
ω = 0
for t in range(0, duration; step=Δt) # increments Δt as needed
    α = ddθ(θ) - copysign(drag(ω), ω)
    push!(df, [t, θ, ω, α]) # record state at this point
    ω += α * Δt
    θ += ω * Δt
end
```

## Data Collection
To collect the relevant data,
I first identified & filtered for only the extremes of ``\theta`` using ``\omega``.
```julia, eval=false
function extremes(df::AbstractDataFrame)
    extremes = DataFrame(first(df))
    for i in 3:nrow(df)
        if sign(df[i-1, :ω]) ≠ sign(df[i, :ω])
            push!(extremes, df[i-1, :])
        end
    end
    extremes
end
```
The first period is then taken as the difference between the 1st and 3rd extreme.

The simulation is run several times with different parameters
to simulate the independent variables under study (amplitude, length/radius),
and the period is recorded at each step.
Average period is taken as the mean of the first 15 periods (arbitrarily chosen).

In order to run the simulation with and without air resistance,
I simply set ``\gamma = 0`` which removes this term from the equation for ``\alpha``.

# Results

## General/Simulation Effectiveness
Firstly, to validate our simulation for future tests,
we can visualize the trajectory of our pendulum with and without air resistance.
```julia
p = Pendulum(
    .3, # 30cm pendulum
    deg2rad(45), # initial θ
    Bob(
        mass = .05, # 50g
        diameter = .05, # 5cm
        γ = γ
    )
)

with_resistance = simulate(p, 10)
no_resistance = simulate(p, 10, resistance=false)

plot(
    with_resistance[!, :time],
    [with_resistance[!, :θ], no_resistance[!, :θ]],
    label = ["\\gamma = $γ" "\\gamma = 0"],
    xlabel = "Time (s)",
    ylabel = "Position (deg)",
    yformatter = round ∘ rad2deg
)
```
We can see that the pendulum in a vacuum has constant amplitude,
whereas the simulation with air resistance displays a slight dampening effect.
This effect is likely so pronounced because the bob is light (`j p.bob.mass * 1000`g).

## Amplitude and Period
As we can see from the below figure,
as amplitude increases, the time of the first period
(roughly equivalent to the period in a vacuum) increases as well.
This effect is very minor below ``30^\circ`` but becomes very pronounced
above ~80 degrees. The ability to simulate such high angles with "rod-like" behaviour
(that is, with no flexibility in the string),
is one advantage of using a computer simulation over a physical pendulum.
While the average period also increases with amplitude,
this effect is far less pronounced given that an increased velocity
increases the dampening factor of air resistance.
This curve is closer to what we would likely see in a real-life experiment on Earth.
```julia, fig_cap="Oscillation period increases with release amplitude."
df = DataFrame(amplitude=Number[], period_initial=Number[], period_average=Number[])

for deg in range(5, 175; step = 2)
    local p = Pendulum(.3, deg2rad(deg), Bob(.05, .05, γ))
    runthrough = simulate(p, 30) |> extremes |> periods
    @inbounds push!(df, [deg runthrough[1] mean(runthrough[1:min(20, length(runthrough))])])
end

plot(
    df[!, :amplitude],
    [df[!, :period_initial] df[!, :period_average]],
    label = ["First Period" "Average Period"],
    xlabel = "Amplitude (deg)",
    ylabel = "Period (s)"
)
```

Showing the every 2 degrees of the first ~20 extremes
gives a close up of the effect on small angles.
```julia, echo=false
@view df[1:20, :]
```
```julia, echo=false, fig_cap="Period of First 20 Extremes: Detailed Image of Small Max Amplitudes."
plot(
    df[1:20, :amplitude],
    [df[1:20, :period_initial] df[1:20, :period_average]],
    label = ["First Period" "Average"],
    xlabel = "Amplitude (deg)",
    ylabel = "Period (s)"
)
```

This supports Galileo's hypothesis that amplitude has minimal/negligible
impact on period at very small angles, but as angle increases,
it starts to show very relevant effects.

## Length (radius) and Period
Period also increase substantially as length is increased,
from 10cm to 2m, though the rate of increase slows as the pendulum lengthens.
```julia, fig_cap="Period increases with penulum length (radius) at a release angle of 30deg."
df = DataFrame(len=Number[], period_initial=Number[], period_average=Number[])

for len in range(.1, 2, step=.1)
    local p = Pendulum(len, deg2rad(30), Bob(.05, .05, γ))
    runthrough = simulate(p, 30) |> extremes |> periods
    @inbounds push!(df, [len runthrough[1] mean(runthrough[1:min(20, length(runthrough))])])
end

plot(
    df[!, :len],
    [df[!, :period_initial] df[!, :period_average]],
    label = ["First Period" "Average"],
    xlabel = "String Length (m)",
    ylabel = "Period (s)"
)
```

To better visualize the effects of air resistance we can increase ``\theta``
to increase the dampening effect.
Once again, air resistance reduces the period as length increases,
for the same reason as above.
```julia, echo=false, fig_cap="Period increases with penulum length (radius) at a release angle of 100deg."
df = DataFrame(len=Number[], period_initial=Number[], period_average=Number[])

for len in range(.1, 2, step=.1)
    local p = Pendulum(len, deg2rad(100), Bob(.05, .05, γ))
    runthrough = simulate(p, 30) |> extremes |> periods
    push!(df, [len runthrough[1] mean(runthrough[1:min(20, length(runthrough))])])
end

plot(
    df[!, :len],
    [df[!, :period_initial] df[!, :period_average]],
    label = ["First Period" "Average"],
    xlabel = "String Length (m)",
    ylabel = "Period (s)"
)
```
This supports Galileo's hypothesis that length *does* affect period.

# Error, Uncertainty, and Limitations
Given the simulated nature of the experiment,
and that it uses precise formulas without any random parameters,
it is completely deterministic.
Repeating the simulation will neccesarily yield the same results every time.
Consequently, there is no uncertainty in the data or figures.
This simulation is "perfectly" precise.

This simulation is very accurate as well;
while there are very few sources of error (systemic and human),
there exist some very minor sources of error inherent to the method.

Firstly, Euler's method is *not* precise integration,
and as such the simulation "overshoots" the exactly correct value for
``\theta`` each period.
However, this error is effectively mitigated by reducing
the Euler step size to `j Δt` seconds.
Based on experimental simulations of this value of `Δt`,
``\epsilon = \pm 10^{-7}`` from the actual.
Additionally, this error cancels itself since
the same Euler inaccuracy occurs at both extremes of the ``\sin`` function.

In addition, by virtue of being a computer simulation that uses floating point values,
there exists some negligible (and unavoidable) floating point inaccuracy which is typically
``<10^-8`` at the most. This inaccuracy is unpredictable, but it does not significantly impact the results.

It should be noted that while computer simulations are very useful for precise and quick simulation of physics processes,
they rely on prior real-world experiments and observations.
For example, ``\gamma`` is experimentally determined for spheres.
To verify the experiment, I also compared its behaviour to real-life pendulum behaviour,
to ensure that it behaved similarly.

# Appendix A
The full source code for this project is available on GitHub: [https://github.com/dkantereivin/pendulum-sim](https://github.com/dkantereivin/pendulum-sim).

Plots are generated using Julia's Plots library ([doi: 10.5281](https://doi.org/10.5281/zenodo.4725317)).
